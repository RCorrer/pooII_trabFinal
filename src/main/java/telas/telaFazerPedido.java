/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package telas;

import java.sql.SQLException;
import java.util.AbstractList;
import java.util.ArrayList;
import java.util.List;
import javax.swing.JOptionPane;
import pizzaria.controller.PedidoController;
import pizzaria.controller.PizzaController;
import pizzaria.controller.SaborController;
import pizzaria.controller.TipoPizzaController;
import pizzaria.enums.FormaPizza;
import pizzaria.enums.StatusPedido;
import pizzaria.model.Cliente;
import pizzaria.model.Pedido;
import pizzaria.model.Pizza;
import pizzaria.model.Sabor;
import pizzaria.model.TipoPizza;
import pizzaria.model.formas.Circulo;
import pizzaria.model.formas.Forma;
import pizzaria.model.formas.Quadrado;
import pizzaria.model.formas.TrianguloEquilatero;
import pizzaria.util.FormaFactory;
import pizzaria.view.TableModelPizzas;

/**
 *
 * @author joaow
 */
public class telaFazerPedido extends javax.swing.JFrame {

    /**
     * Creates new form telaFazerPedido
     */
    public telaFazerPedido() {
        initComponents();
    }

    private Pedido pedidoEscolhido;
    private Forma forma;
    private Cliente clienteSelecionado;
    private PedidoController pedidoController = new PedidoController();
    private PizzaController pizzaController = new PizzaController();
    private TipoPizzaController tipoPizzaCotroller = new TipoPizzaController();
    private SaborController saborController = new SaborController();
    private TableModelPizzas TabelaModelPizzas = new TableModelPizzas();
    private Pizza pizzaSelecionada;
    private int linhaClicadaParaRemoção;
    //array temporario para salvar as pizzas que vao ser adicionadas no pedido
    List<Pizza> pizzasCriadas = new ArrayList<Pizza>();
   

    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        grupoBotao = new javax.swing.ButtonGroup();
        btnSair = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        boxForma = new javax.swing.JComboBox<>();
        btnArea = new javax.swing.JRadioButton();
        btnDimensao = new javax.swing.JRadioButton();
        txtAreaDimensao = new javax.swing.JTextField();
        boxSabor1 = new javax.swing.JComboBox<>();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        boxSabor2 = new javax.swing.JComboBox<>();
        btnAdicionar = new javax.swing.JButton();
        labelValorTotal = new javax.swing.JLabel();
        boxTipos1 = new javax.swing.JComboBox<>();
        boxTipos2 = new javax.swing.JComboBox<>();
        jScrollPane1 = new javax.swing.JScrollPane();
        tablePizzas = new javax.swing.JTable();
        btnCalcular = new javax.swing.JButton();
        btnRemover = new javax.swing.JButton();
        labelMax = new javax.swing.JLabel();
        labelMin = new javax.swing.JLabel();
        jToggleButton1 = new javax.swing.JToggleButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        addComponentListener(new java.awt.event.ComponentAdapter() {
            public void componentShown(java.awt.event.ComponentEvent evt) {
                formComponentShown(evt);
            }
        });

        btnSair.setText("Sair");
        btnSair.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSairActionPerformed(evt);
            }
        });

        jLabel2.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jLabel2.setText("FORMA:");

        boxForma.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] {"---== ==---" }));
        boxForma.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                boxFormaActionPerformed(evt);
            }
        });

        grupoBotao.add(btnArea);
        btnArea.setText("Área");
        btnArea.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAreaActionPerformed(evt);
            }
        });

        grupoBotao.add(btnDimensao);
        btnDimensao.setText("Dimensão");
        btnDimensao.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDimensaoActionPerformed(evt);
            }
        });

        boxSabor1.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] {}));

        jLabel4.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jLabel4.setText("SABOR 1");

        jLabel5.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jLabel5.setText("SABOR 2");

        boxSabor2.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] {  }));
        boxSabor2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                boxSabor2ActionPerformed(evt);
            }
        });

        btnAdicionar.setText("Adicionar");
        btnAdicionar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAdicionarActionPerformed(evt);
            }
        });

        labelValorTotal.setText("VALOR TOTAL");

        boxTipos1.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] {}));
        boxTipos1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                boxTipos1ActionPerformed(evt);
            }
        });

        boxTipos2.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Nenhum"}));
        boxTipos2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                boxTipos2ActionPerformed(evt);
            }
        });

        tablePizzas.setModel(TabelaModelPizzas);
        tablePizzas.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tablePizzasMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(tablePizzas);

        btnCalcular.setText("Calcular");
        btnCalcular.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCalcularActionPerformed(evt);
            }
        });

        btnRemover.setText("Remover");
        btnRemover.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRemoverActionPerformed(evt);
            }
        });

        labelMax.setText("Max");

        labelMin.setText("Min");

        jToggleButton1.setText("Salvar Pedido");
        jToggleButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jToggleButton1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(labelMin)
                        .addGap(79, 79, 79)
                        .addComponent(labelMax))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel4)
                        .addGap(131, 131, 131)
                        .addComponent(jLabel5))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(boxTipos1, javax.swing.GroupLayout.PREFERRED_SIZE, 170, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(boxTipos2, javax.swing.GroupLayout.PREFERRED_SIZE, 170, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(boxForma, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnDimensao)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(70, 70, 70)
                        .addComponent(btnRemover, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(30, 30, 30)
                        .addComponent(btnAdicionar, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(btnArea)
                    .addComponent(jLabel2)
                    .addComponent(txtAreaDimensao, javax.swing.GroupLayout.PREFERRED_SIZE, 170, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(127, 127, 127)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(labelValorTotal, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(btnCalcular, javax.swing.GroupLayout.DEFAULT_SIZE, 100, Short.MAX_VALUE)))
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                        .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                            .addComponent(btnSair, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jToggleButton1))
                        .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                            .addComponent(boxSabor1, javax.swing.GroupLayout.PREFERRED_SIZE, 170, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGap(18, 18, 18)
                            .addComponent(boxSabor2, javax.swing.GroupLayout.PREFERRED_SIZE, 170, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 545, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(67, 67, 67)
                        .addComponent(jLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(boxForma, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(btnArea)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnDimensao)
                        .addGap(18, 18, 18)
                        .addComponent(txtAreaDimensao, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(labelMax)
                            .addComponent(labelMin))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 32, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel4)
                            .addComponent(jLabel5))
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(boxTipos2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(boxTipos1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(10, 10, 10)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(boxSabor1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(boxSabor2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(28, 28, 28)
                        .addComponent(btnCalcular)
                        .addGap(18, 18, 18)
                        .addComponent(labelValorTotal)
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(btnRemover)
                            .addComponent(btnAdicionar))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 32, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(btnSair)
                            .addComponent(jToggleButton1)))
                    .addComponent(jScrollPane1))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnSairActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSairActionPerformed
        // sair desta tela  
        telaVerClientePedidos telaVerClientePedidos1 = new telaVerClientePedidos();
        telaVerClientePedidos1.setVisible(true);
        this.dispose();
        
    }//GEN-LAST:event_btnSairActionPerformed

    private void formComponentShown(java.awt.event.ComponentEvent evt) {//GEN-FIRST:event_formComponentShown

        //popular combo boxes e inicializar id do pedido e tabela dos pedidos
        String[] formas = {"Quadrada", "Circular", "Triangular"};
        String[] tiposPizzas = {"Simples", "Especial", "Premium"};

        //popular formas
        for (String tipos : formas) {
            boxForma.addItem(tipos);
        }
        //popular pizzas
        for (String pizzas : tiposPizzas) {
            boxTipos1.addItem(pizzas);
            boxTipos2.addItem(pizzas);
        }


    }//GEN-LAST:event_formComponentShown

    private void boxTipos1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_boxTipos1ActionPerformed
        // Mudar sabores de acordo com o filtro selecionado
        Object itemSelecionado = boxTipos1.getSelectedItem();
        String texto = itemSelecionado + "";
        boxSabor1.removeAllItems();
        List<Sabor> sabores = new ArrayList();
        try{
        switch (texto) {
            case "Simples":
                //fazer mostrar lista so de simples
                sabores = saborController.buscarSaboresPorTipo(Long.valueOf(1));
                break;
            case "Especial":
                //mostar lista de especial
                sabores = saborController.buscarSaboresPorTipo(Long.valueOf(2));

                break;
            case "Premium":
                //mostra lista premium
                sabores = saborController.buscarSaboresPorTipo(Long.valueOf(3));

                break;
        }
        } catch (SQLException ex) {
            System.out.println("ERRO AO LISTA OS SABORES\n" + ex);
        }
        for (Sabor sabor : sabores) {
            boxSabor1.addItem(sabor.getNome());
        }
    }//GEN-LAST:event_boxTipos1ActionPerformed

    private void boxTipos2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_boxTipos2ActionPerformed
        // Mudar sabores de acordo com o filtro selecioando
        Object itemSelecionado = boxTipos2.getSelectedItem();
        String texto = itemSelecionado + "";
        boxSabor2.removeAllItems();
        List<Sabor> sabores = new ArrayList();
        try{
        switch (texto) {
            case "Simples":
                //fazer mostrar lista so de simples
                sabores = saborController.buscarSaboresPorTipo(Long.valueOf(1));
                break;
            case "Especial":
                //mostar lista de especial
                sabores = saborController.buscarSaboresPorTipo(Long.valueOf(2));

                break;
            case "Premium":
                //mostra lista premium
                sabores = saborController.buscarSaboresPorTipo(Long.valueOf(3));

                break;
        }
        } catch (SQLException ex) {
            System.out.println("ERRO AO LISTA OS SABORES\n" + ex);
        }
        for (Sabor sabor : sabores) {
            boxSabor2.addItem(sabor.getNome());
        }
    }//GEN-LAST:event_boxTipos2ActionPerformed

    private void btnCalcularActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCalcularActionPerformed
        //calcular o valor da pizza e criar booleano para obrigar a calcular o valor antes de adicionar
        //sera quase uma replica do botao de casdatrar mas ao inves de cadastrar, vai apenas mostrar o valor da pizza
        try {
        String formaSelecionada = boxForma.getSelectedItem() + "";
        String sValor = txtAreaDimensao.getText();
        double dimensao = Double.parseDouble(sValor);
        
        // Validate inputs first
        if (boxSabor1.getSelectedItem() == null || boxTipos1.getSelectedItem() == null) {
            JOptionPane.showMessageDialog(null, "Selecione pelo menos um sabor e tipo.", "Dados incompletos", JOptionPane.WARNING_MESSAGE);
            return;
        }

        // Get selected indices safely
        int indexSabor1 = boxSabor1.getSelectedIndex();
        String tipo1 = boxTipos1.getSelectedItem() + "";
        
        // Map tipo names to IDs
        long tipoId1 = 0;
        switch(tipo1) {
            case "Simples": tipoId1 = 1; break;
            case "Especial": tipoId1 = 2; break;
            case "Premium": tipoId1 = 3; break;
        }
        
        // Get the list of sabores for the first type
        List<Sabor> saboresTipo1;
        try {
            saboresTipo1 = saborController.buscarSaboresPorTipo(tipoId1);
            if (saboresTipo1 == null || saboresTipo1.isEmpty() || indexSabor1 >= saboresTipo1.size()) {
                JOptionPane.showMessageDialog(null, "Sabor 1 inválido ou não disponível.", "Erro", JOptionPane.ERROR_MESSAGE);
                return;
            }
            
            Sabor sabor1 = saboresTipo1.get(indexSabor1);
            List<Long> listaSaboresIds = new ArrayList<>();
            List<TipoPizza> listaTipos = new ArrayList<>();
            
            // Add first sabor and its type
            listaSaboresIds.add(sabor1.getId());
            TipoPizza tipoPizza1 = tipoPizzaCotroller.buscarTipoPizzaPorId(sabor1.getTipoPizzaId());
            listaTipos.add(tipoPizza1);
            
            // Handle second sabor if selected (not "Nenhum")
            if (!"Nenhum".equals(boxTipos2.getSelectedItem() + "") && boxSabor2.getSelectedItem() != null) {
                int indexSabor2 = boxSabor2.getSelectedIndex();
                String tipo2 = boxTipos2.getSelectedItem() + "";
                
                long tipoId2 = 0;
                switch(tipo2) {
                    case "Simples": tipoId2 = 1; break;
                    case "Especial": tipoId2 = 2; break;
                    case "Premium": tipoId2 = 3; break;
                }
                
                List<Sabor> saboresTipo2 = saborController.buscarSaboresPorTipo(tipoId2);
                if (saboresTipo2 != null && !saboresTipo2.isEmpty() && indexSabor2 < saboresTipo2.size()) {
                    Sabor sabor2 = saboresTipo2.get(indexSabor2);
                    listaSaboresIds.add(sabor2.getId());
                    TipoPizza tipoPizza2 = tipoPizzaCotroller.buscarTipoPizzaPorId(sabor2.getTipoPizzaId());
                    listaTipos.add(tipoPizza2);
                }
            }
            
            // Create temporary pizza for calculation
            Pizza pizza = new Pizza();
            pizza.setSaboresIds(listaSaboresIds);
            pizza.setPedidoId(1L);
            pizza.setId(1L);
            pizza.setQuantidade(1);

            boolean calculated = false;
            switch (formaSelecionada) {
                case "Quadrada":
                    if (btnArea.isSelected()) {
                        if (dimensao >= 100 && dimensao <= 1600) {
                            pizza.setForma(FormaFactory.criarFormaPorArea(FormaPizza.QUADRADA, dimensao)); // true indica que é área
                            calculated = true;
                        } else {
                            JOptionPane.showMessageDialog(null, "Área deve estar entre 100 e 1600 cm²", "Valor inválido", JOptionPane.WARNING_MESSAGE);
                        }
                    } else if (btnDimensao.isSelected()) {
                        if (dimensao >= 10 && dimensao <= 40) {
                            pizza.setForma(new Quadrado(dimensao)); // false indica que é lado
                            calculated = true;
                        } else {
                            JOptionPane.showMessageDialog(null, "Lado deve estar entre 10 e 40 cm", "Valor inválido", JOptionPane.WARNING_MESSAGE);
                        }
                    }
                    break;

                case "Circular":
                    if (btnArea.isSelected()) {
                        if (dimensao >= 100 && dimensao <= 1600) {
                            pizza.setForma(FormaFactory.criarFormaPorArea(FormaPizza.CIRCULAR, dimensao)); // true indica que é área
                            calculated = true;
                        } else {
                            JOptionPane.showMessageDialog(null, "Área deve estar entre 100 e 1600 cm²", "Valor inválido", JOptionPane.WARNING_MESSAGE);
                        }
                    } else if (btnDimensao.isSelected()) {
                        if (dimensao >= 7 && dimensao <= 23) {
                            pizza.setForma(new Circulo(dimensao));
                            calculated = true;
                        } else {
                            JOptionPane.showMessageDialog(null, "Raio deve estar entre 7 e 23 cm", "Valor inválido", JOptionPane.WARNING_MESSAGE);
                        }
                    }
                    break;

                case "Triangular":
                    if (btnArea.isSelected()) {
                        if (dimensao >= 100 && dimensao <= 1600) {
                            pizza.setForma(FormaFactory.criarFormaPorArea(FormaPizza.TRIANGULAR, dimensao)); // true indica que é área
                            calculated = true;
                        } else {
                            JOptionPane.showMessageDialog(null, "Área deve estar entre 100 e 1600 cm²", "Valor inválido", JOptionPane.WARNING_MESSAGE);
                        }
                    } else if (btnDimensao.isSelected()) {
                        if (dimensao >= 20 && dimensao <= 60) {
                            pizza.setForma(new TrianguloEquilatero(dimensao));
                            calculated = true;
                        } else {
                            JOptionPane.showMessageDialog(null, "Lado deve estar entre 20 e 60 cm", "Valor inválido", JOptionPane.WARNING_MESSAGE);
                        }
                    }
                    break;
            }

            if (calculated) {
                pizza.calcularValor(listaTipos);
                String pizzaValorTotal = String.format("%.2f", pizza.getValorUnitario());
                labelValorTotal.setText("R$: " + pizzaValorTotal);
            } else if (!btnArea.isSelected() && !btnDimensao.isSelected()) {
                JOptionPane.showMessageDialog(null, "SELECIONE AREA OU DIMENSAO.\n", "AREA OU DIMENSAO", JOptionPane.INFORMATION_MESSAGE);
            }
            
        } catch (SQLException ex) {
            System.out.println("ERRO AO PEGAR SABORES\n" + ex);
            JOptionPane.showMessageDialog(null, "Erro ao acessar os sabores.", "Erro", JOptionPane.ERROR_MESSAGE);
        }
    } catch (NumberFormatException e) {
        JOptionPane.showMessageDialog(null, "Insira um valor válido numérico.\n", "VALOR VÁLIDO", JOptionPane.INFORMATION_MESSAGE);
    }

    }//GEN-LAST:event_btnCalcularActionPerformed

    private void btnAdicionarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAdicionarActionPerformed
        // TODO add your handling code here:
        // Inserir pizza no pedido
        //pegar todos os valores que pizza precisa
        
        //PAREI AQUI AGORA TENHO QUE FAZER A PARTE DE ADICIONAR A PIZZA USANDO OS CONTROLLER, adicionar elas 
        // em uma lista e quando fechar esta tela criar um
        // pedido com as pizzas adicionadas dentro desta tela
         try {
        String formaSelecionada = boxForma.getSelectedItem() + "";
        String sValor = txtAreaDimensao.getText();
        double dimensao = Double.parseDouble(sValor);
        
        // Validar entradas
        if (boxSabor1.getSelectedItem() == null || boxTipos1.getSelectedItem() == null) {
            JOptionPane.showMessageDialog(null, "Selecione pelo menos um sabor e tipo.", "Dados incompletos", JOptionPane.WARNING_MESSAGE);
            return;
        }

        // Obter índices selecionados
        int indexSabor1 = boxSabor1.getSelectedIndex();
        String tipo1 = boxTipos1.getSelectedItem() + "";
        
        // Mapear tipos para IDs
        long tipoId1 = 0;
        switch(tipo1) {
            case "Simples": tipoId1 = 1; break;
            case "Especial": tipoId1 = 2; break;
            case "Premium": tipoId1 = 3; break;
        }
        
        // Buscar sabores do primeiro tipo
        List<Sabor> saboresTipo1 = saborController.buscarSaboresPorTipo(tipoId1);
        if (saboresTipo1 == null || saboresTipo1.isEmpty() || indexSabor1 >= saboresTipo1.size()) {
            JOptionPane.showMessageDialog(null, "Sabor 1 inválido ou não disponível.", "Erro", JOptionPane.ERROR_MESSAGE);
            return;
        }
        
        Sabor sabor1 = saboresTipo1.get(indexSabor1);
        List<Long> listaSaboresIds = new ArrayList<>();
        List<TipoPizza> listaTipos = new ArrayList<>();
        
        // Adicionar primeiro sabor e seu tipo
        listaSaboresIds.add(sabor1.getId());
        TipoPizza tipoPizza1 = tipoPizzaCotroller.buscarTipoPizzaPorId(sabor1.getTipoPizzaId());
        listaTipos.add(tipoPizza1);
        
        // Adicionar segundo sabor se selecionado
        if (!"Nenhum".equals(boxTipos2.getSelectedItem() + "") && boxSabor2.getSelectedItem() != null) {
            int indexSabor2 = boxSabor2.getSelectedIndex();
            String tipo2 = boxTipos2.getSelectedItem() + "";
            
            long tipoId2 = 0;
            switch(tipo2) {
                case "Simples": tipoId2 = 1; break;
                case "Especial": tipoId2 = 2; break;
                case "Premium": tipoId2 = 3; break;
            }
            
            List<Sabor> saboresTipo2 = saborController.buscarSaboresPorTipo(tipoId2);
            if (saboresTipo2 != null && !saboresTipo2.isEmpty() && indexSabor2 < saboresTipo2.size()) {
                Sabor sabor2 = saboresTipo2.get(indexSabor2);
                listaSaboresIds.add(sabor2.getId());
                TipoPizza tipoPizza2 = tipoPizzaCotroller.buscarTipoPizzaPorId(sabor2.getTipoPizzaId());
                listaTipos.add(tipoPizza2);
            }
        }

        // Criar pizza com base na forma selecionada
        Pizza pizza = null;
        boolean isArea = btnArea.isSelected();
        
        switch (formaSelecionada) {
            case "Quadrada":
                if (isArea && dimensao >= 100 && dimensao <= 1600) {
                    pizza = pizzaController.criarPizzaPorArea(FormaPizza.QUADRADA, dimensao, listaSaboresIds, 1);
                } else if (!isArea && dimensao >= 10 && dimensao <= 40) {
                    pizza = pizzaController.criarPizza(FormaPizza.QUADRADA, dimensao, listaSaboresIds, 1);
                } else {
                    showInvalidValueMessage(isArea, "Quadrada");
                    return;
                }
                break;

            case "Circular":
                if (isArea && dimensao >= 100 && dimensao <= 1600) {
                    pizza = pizzaController.criarPizzaPorArea(FormaPizza.CIRCULAR, dimensao, listaSaboresIds, 1);
                } else if (!isArea && dimensao >= 7 && dimensao <= 23) {
                    pizza = pizzaController.criarPizza(FormaPizza.CIRCULAR, dimensao, listaSaboresIds, 1);
                } else {
                    showInvalidValueMessage(isArea, "Circular");
                    return;
                }
                break;

            case "Triangular":
                if (isArea && dimensao >= 100 && dimensao <= 1600) {
                    pizza = pizzaController.criarPizzaPorArea(FormaPizza.TRIANGULAR, dimensao, listaSaboresIds, 1);
                } else if (!isArea && dimensao >= 20 && dimensao <= 60) {
                    pizza = pizzaController.criarPizza(FormaPizza.TRIANGULAR, dimensao, listaSaboresIds, 1);
                } else {
                    showInvalidValueMessage(isArea, "Triangular");
                    return;
                }
                break;

            default:
                JOptionPane.showMessageDialog(null, "SELECIONE UM FORMATO VÁLIDO.\n", "FORMATO INVÁLIDO", JOptionPane.INFORMATION_MESSAGE);
                return;
        }

        if (pizza != null) {
            pizzasCriadas.add(pizza);
            this.TabelaModelPizzas.setListaPizzas(pizzasCriadas);
            JOptionPane.showMessageDialog(null, "Pizza adicionada com sucesso!", "Sucesso", JOptionPane.INFORMATION_MESSAGE);
            
            // Limpar campos para nova pizza
            boxSabor1.setSelectedIndex(0);
            boxSabor2.setSelectedIndex(0);
            boxTipos1.setSelectedIndex(0);
            boxTipos2.setSelectedIndex(0);
            txtAreaDimensao.setText("");
            labelValorTotal.setText("VALOR TOTAL");
        }

    } catch (NumberFormatException e) {
        JOptionPane.showMessageDialog(null, "Insira um valor válido numérico.\n", "VALOR INVÁLIDO", JOptionPane.INFORMATION_MESSAGE);
    } catch (SQLException ex) {
        System.out.println("ERRO AO ADICIONAR PIZZA:\n" + ex);
        JOptionPane.showMessageDialog(null, "Erro ao adicionar pizza. Tente novamente.", "Erro", JOptionPane.ERROR_MESSAGE);
    }
}                                            

// Método auxiliar para mostrar mensagem de valor inválido
private void showInvalidValueMessage(boolean isArea, String forma) {
    String tipo = isArea ? "área" : "dimensão";
    String mensagem;
    
    switch (forma) {
        case "Quadrada":
            mensagem = isArea ? "Área deve estar entre 100 e 1600 cm²" : "Lado deve estar entre 10 e 40 cm";
            break;
        case "Circular":
            mensagem = isArea ? "Área deve estar entre 100 e 1600 cm²" : "Raio deve estar entre 7 e 23 cm";
            break;
        case "Triangular":
            mensagem = isArea ? "Área deve estar entre 100 e 1600 cm²" : "Lado deve estar entre 20 e 60 cm";
            break;
        default:
            mensagem = "Valor inválido para a forma selecionada";
    }
    
    JOptionPane.showMessageDialog(null, 
        String.format("VALOR DE %s INVÁLIDO PARA PIZZA %s.\n%s", 
            tipo.toUpperCase(), forma.toUpperCase(), mensagem), 
        "VALOR INVÁLIDO", 
        JOptionPane.WARNING_MESSAGE);

    }//GEN-LAST:event_btnAdicionarActionPerformed

    private void btnRemoverActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRemoverActionPerformed
        //remover pizza selecionada
        if (this.pizzaSelecionada != null) {
            pizzasCriadas.remove(pizzaSelecionada);
            this.TabelaModelPizzas.setListaPizzas(pizzasCriadas);
        } else {
            JOptionPane.showMessageDialog(null, "SELECIONE UMA PIZZA PRIMEIRO.\n", "SELECIONE PIZZA", JOptionPane.INFORMATION_MESSAGE);

        }


    }//GEN-LAST:event_btnRemoverActionPerformed

    private void tablePizzasMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tablePizzasMouseClicked
        //selecionar pizza clicada para remoção
        this.linhaClicadaParaRemoção = this.tablePizzas.rowAtPoint(evt.getPoint());
        Pizza p = this.TabelaModelPizzas.getPizza(linhaClicadaParaRemoção);
        this.pizzaSelecionada = p;

    }//GEN-LAST:event_tablePizzasMouseClicked

    private void boxFormaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_boxFormaActionPerformed
        // trocar valores de Max e Min
        String forma = boxForma.getSelectedItem() + "";
        labelMax.setText("Máx: ");
        labelMin.setText("Min: ");
        if (btnDimensao.isSelected()) {
            switch (forma) {
                case ("Quadrada"):
                    labelMax.setText("Máx: 40cm");
                    labelMin.setText("Mín: 10cm");
                    break;
                case ("Circular"):
                    labelMax.setText("Máx: 23cm");
                    labelMin.setText("Mín: 7cm");
                    break;
                case ("Triangular"):
                    labelMax.setText("Máx: 60cm");
                    labelMin.setText("Min: 20cm");
                    break;
                default:
                    break;

            }
        }
        
        

    }//GEN-LAST:event_boxFormaActionPerformed

    private void boxSabor2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_boxSabor2ActionPerformed
    }//GEN-LAST:event_boxSabor2ActionPerformed

    private void btnAreaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAreaActionPerformed
        //setar texto min e max
       labelMin.setText("Min: 100 cm2");
       labelMax.setText("Máx: 1600 cm2");
        
    }//GEN-LAST:event_btnAreaActionPerformed

    private void btnDimensaoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDimensaoActionPerformed
        // setar minimo e maximo de acordo com a pizza
         String forma = boxForma.getSelectedItem() + "";
        switch (forma) {
            case ("Quadrada"):
                labelMax.setText("Máx: 40cm");
                labelMin.setText("Mín: 10cm");
                break;
            case ("Circular"):
                labelMax.setText("Máx: 23cm");
                labelMin.setText("Mín: 7cm");
                break;
            case ("Triangular"):
                labelMax.setText("Máx: 60cm");
                labelMin.setText("Min: 20cm");
                break;
            default:
                JOptionPane.showMessageDialog(null, "SELECIONE UMA FORMA PRIMEIRO.\n", "SELECIONE FORMA", JOptionPane.INFORMATION_MESSAGE);
                break;
                
        }
    }//GEN-LAST:event_btnDimensaoActionPerformed

    private void jToggleButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jToggleButton1ActionPerformed
        // TODO add your handling code here:
        
        //sair salvando o pedido
        Cliente c = this.clienteSelecionado;
        if (pizzasCriadas.isEmpty()){
            JOptionPane.showMessageDialog(null, "NÃO PODE FAZER PEDIDO SEM PIZZAS.\n", "SEM PIZZAS PEDIDO", JOptionPane.INFORMATION_MESSAGE);
        } else {
        try {
        pedidoController.criarPedido(c.getId(), pizzasCriadas);
        } catch (SQLException ex){
            System.out.println("ERRO AO CRIAR O PEDIDO\n" + ex);
        }
        telaVerClientePedidos telClientePedidosAposSalvar = new telaVerClientePedidos();
        telClientePedidosAposSalvar.setCliente(c);
        telClientePedidosAposSalvar.setVisible(true);
        this.dispose();
        }
        
    }//GEN-LAST:event_jToggleButton1ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(telaFazerPedido.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(telaFazerPedido.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(telaFazerPedido.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(telaFazerPedido.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new telaFazerPedido().setVisible(true);

            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox<String> boxForma;
    private javax.swing.JComboBox<String> boxSabor1;
    private javax.swing.JComboBox<String> boxSabor2;
    private javax.swing.JComboBox<String> boxTipos1;
    private javax.swing.JComboBox<String> boxTipos2;
    private javax.swing.JButton btnAdicionar;
    private javax.swing.JRadioButton btnArea;
    private javax.swing.JButton btnCalcular;
    private javax.swing.JRadioButton btnDimensao;
    private javax.swing.JButton btnRemover;
    private javax.swing.JButton btnSair;
    private javax.swing.ButtonGroup grupoBotao;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JToggleButton jToggleButton1;
    private javax.swing.JLabel labelMax;
    private javax.swing.JLabel labelMin;
    private javax.swing.JLabel labelValorTotal;
    private javax.swing.JTable tablePizzas;
    private javax.swing.JTextField txtAreaDimensao;
    // End of variables declaration//GEN-END:variables

   
    void setCliente (Cliente c){
        this.clienteSelecionado = c;
    }
    
}
